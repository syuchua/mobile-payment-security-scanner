from abc import ABC, abstractmethod
from typing import Dict, List, Any
from dataclasses import dataclass
from src.core.network_interceptor import NetworkInterceptor


@dataclass
class VulnerabilityResult:
    """漏洞扫描结果数据类"""
    vulnerability_type: str
    severity: str  # 严重程度: 高、中、低
    description: str
    affected_endpoint: str
    details: Dict[str, Any]
    recommendations: List[str]


class VulnerabilityScanner(ABC):
    """漏洞扫描器抽象基类"""

    def __init__(self, interceptor: NetworkInterceptor):
        self.interceptor = interceptor
        self.results: List[VulnerabilityResult] = []

    @abstractmethod
    def scan(self) -> List[VulnerabilityResult]:
        """执行漏洞扫描，返回发现的漏洞列表"""
        pass

    def add_result(self, result: VulnerabilityResult):
        """添加扫描结果"""
        self.results.append(result)

    def get_results(self) -> List[VulnerabilityResult]:
        """获取扫描结果"""
        return self.results